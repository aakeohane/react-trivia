{"version":3,"sources":["img/quiz.png","components/LandingPage.js","components/ButtonGroups.js","App.js","index.js"],"names":["LandingPage","props","className","src","logo","alt","onClick","onStart","href","rel","target","ButtonGroups","active","answered","isCorrect","fixedAnswers","index","id","buttonGroup","splice","setButtonGroup","newChoices","choices","setChoices","clickHandler","disabled","App","initialChoicesArray","useState","buttonArray","setButtonArray","quiz","setQuiz","quizData","setQuizData","message","setMessage","count","setCount","correctAnswers","setCorrectAnswers","setAnswered","useEffect","fetch","then","res","json","data","results","bigArray","correctAnswerArray","map","item","correct_answer","push","wrongAnswersArray","incorrect_answers","name","nanoid","correctAnswer","shuffle","questionObject","question","answers","array","i","length","j","Math","floor","random","quizQuestions","questions","replace","answerButtons","includes","prevState","checkAnswers","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.72609f7a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/quiz.d136d274.png\";","import React from 'react'\nimport logo from '../img/quiz.png'\n\nexport default function LandingPage(props) {\n\n  \n\n  return (\n    <div className=\"flex-wrapper\">\n      <div className=\"content\">\n        <img src={logo} alt=\"quizzical logo\" className=\"quizzical-logo\" />\n        <h1>Quizzical</h1>\n        <p> Test your knowledge! When you start the quiz, you will have to answer 5 random questions. Good luck!</p>\n        <button className=\"quizzical-button\" onClick={props.onStart}> Start quiz!</button>\n      </div>\n      <div className=\"footer\">\n        <footer> Meticulously made by <a href=\"https://github.com/aakeohane/react-trivia\" rel=\"noreferrer\" target=\"_blank\">Aaron</a></footer>\n      </div>\n    </div>\n  )\n}","import React from \"react\";\n\nconst ButtonGroups = props => {\n  \n  const [active, answered, isCorrect, fixedAnswers, index, id] = [props.active, props.answered, props.isCorrect, props.fixedAnswers, props.index, props.id]\n\n  const clickHandler = () => {\n    // array for highlighting pick on click for each button group\n    const buttonGroup = [...props.buttonGroup]\n    buttonGroup.splice(index, 1, id)\n    props.setButtonGroup(buttonGroup)\n\n    // array for storing chosen answer\n    const newChoices = [...props.choices]\n    newChoices.splice(index, 1, fixedAnswers)\n    // prevState adds weird Array at end of array but still works above is cleaner\n    // props.setChoices(prevState => [\n    //   ...props.choices, props.choices.splice(index, 1, fixedAnswers)\n    // ])\n    props.setChoices(newChoices)\n  }\n\n    return (\n      <button\n          className={`answers-btn \n          ${active && 'blue'}\n          ${answered && 'faded'}\n          ${active && answered && 'green'}\n          ${answered && isCorrect && 'green'} \n          ${active && answered && !isCorrect && 'red'}\n          `}\n          onClick={() => clickHandler()}\n          disabled={answered ? true : false}\n          key={id} >\n        {fixedAnswers}\n      </button>\n    )\n}\n\nexport default ButtonGroups","import { useState } from 'react'\nimport { useEffect } from 'react'\nimport LandingPage from './components/LandingPage'\nimport ButtonGroups from './components/ButtonGroups'\nimport { nanoid } from 'nanoid'\n\nfunction App() {\n  // I may add categories and more options for future iterations\n\n  // this initial array needs to have five blank string so they can be replaced by users quiz choices\n  const initialChoicesArray = ['', '', '', '', '']\n  const initialButtonGroupArray = [0, 0, 0, 0, 0]\n  \n  \n  //  I struggled with this part of the code and could not find a solution without creating\n  // separate components and state for each group of answers until I learned how to manipulate\n  // the arrays based on index similar to choices array. May also add each as a property to further consolidate state\n  // if button is clicked change color, remove color and add\n  // color if another button is clicked\n  const [buttonGroup, setButtonGroup] = useState(initialButtonGroupArray)\n  \n  const [buttonArray, setButtonArray] = useState([])\n\n  const [quiz, setQuiz] = useState(false)\n  const [quizData, setQuizData] = useState([])\n  \n  \n  const [message, setMessage] = useState(false)\n  const [count, setCount] = useState(0)\n  const [correctAnswers, setCorrectAnswers] = useState([])\n  const [choices, setChoices] = useState(initialChoicesArray)\n\n  const [answered, setAnswered] = useState(false)\n \n  \n  useEffect(() => {\n    if (!quiz) {\n    fetch(\"https://opentdb.com/api.php?amount=5\")\n      .then(res => res.json())\n      .then(data => setQuizData(data.results))\n    }\n  }, [quiz])\n\n  \n  const startQuiz = () => {\n    setQuiz(true)\n  }\n\n  useEffect(() => {\n    const bigArray = []\n    const correctAnswerArray = []\n    quizData.map((item, index) => {\n      const correctAnswers = item.correct_answer\n      correctAnswerArray.push(correctAnswers)\n      setCorrectAnswers(correctAnswerArray)\n      const wrongAnswers = item.incorrect_answers\n      const wrongAnswersArray = wrongAnswers.map(item => {\n        return {\n          name: item,\n          isCorrect: false,\n          id: nanoid(),\n          index: index\n        }\n      })\n      const correctAnswer = {\n        name: item.correct_answer,\n        isCorrect: true,\n        id: nanoid(),\n        index: index\n      }\n      wrongAnswersArray.push(correctAnswer)\n      \n      shuffle(wrongAnswersArray)\n      const questionObject = {\n        question: item.question,\n        answers: wrongAnswersArray\n      }\n      return bigArray.push(questionObject)\n      \n    })\n    setButtonArray(bigArray)\n      \n  }, [quizData])\n\n  const checkAnswers = (correctAnswers, choices) => {\n    setCount(0)\n    if (choices.includes('')) {\n      setMessage(true)\n    }\n    for (let i = 0; i < correctAnswers.length; i++){\n      if (correctAnswers[i] === choices[i]) {\n        setCount(prevState => prevState +1)\n      } else if (!choices.includes('')) {\n        setAnswered(true)\n        setMessage(false)\n      }\n    }\n  }\n\n  // Fisher-Yates Shuffle Algorithm\n  const shuffle = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n\n  const quizQuestions = buttonArray.map(item => {\n    const unicodeQ = item.question\n    const questions = unicodeQ.replace(/&quot;/g,'\"').replace(/&#039;/g, \"'\")\n      .replace(/&amp;/g, \"&\").replace(/&rsquo;/g, \"\").replace(/&oacute;/g,'Ó').replace(/&uacute;/g, 'ú').replace(/&eacute;/g, 'é')\n    const answerButtons = item.answers.map(item => {\n      const unicodeA = item.name\n      const fixedAnswers = unicodeA.replace(/&quot;/g,'\"').replace(/&#039;/g, \"'\").replace(/&amp;/g, \"&\").replace(/&oacute;/g,'Ó').replace(/&uacute;/g, 'ú').replace(/&eacute;/g, 'é')\n        return (\n          <ButtonGroups\n            fixedAnswers={fixedAnswers}\n            id={item.id}\n            key={item.id}\n            index={item.index}\n            isCorrect={item.isCorrect}\n            answered={answered}\n            choices={choices}\n            setChoices={setChoices}\n            buttonGroup={buttonGroup}\n            setButtonGroup={setButtonGroup}\n            active={buttonGroup[item.index] === item.id ? true : false} />\n        )\n    })\n      return (\n        <div className=\"question-group\">\n          <p className=\"question\">{questions}</p>\n          <div className=\"button-container\">{answerButtons}</div>\n        </div>\n      )\n  })\n\n  const resetGame = () => {\n    setQuiz(false)\n    setAnswered(false)\n    // modifying state directly, but not sure how else to do this, \n    // have to reset choices state\n    setChoices(initialChoicesArray)\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"landing-container\">\n        <div className=\"yellow-blob\"></div>\n        <div className=\"blue-blob\"></div>\n        { !quiz && <LandingPage onStart={() => startQuiz()} />}\n        <div className=\"quiz-container\">\n          { quiz && quizQuestions}\n          { message && <p className=\"message\">You must answer all questions!</p> }\n          { quiz && !answered && \n            <button className=\"quizzical-button\" \n              onClick={() => checkAnswers(correctAnswers, choices)}>Check answers\n            </button>}\n          { answered && \n            <div className=\"play-again-container\">\n              <p>You scored {count}/5 correct answers</p>\n              <button className=\"quizzical-button\"\n                onClick={() => resetGame()}>Play again\n              </button>\n            </div>}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}